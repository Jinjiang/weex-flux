<template>
  <div class="wrapper">
    <text class="thread-heading">{{ thread && thread.name }}</text>
    <div id="list" class="list">
      <message
        repeat="(i, message) in sortedMessages"
        message="{{ message }}"></message>
    </div>
    <div class="composer">
      <input class="composer-input" id="input" value="{{inputValue}}" oninput="update"></input>
      <text class="composer-button" onclick="sendMessage">Send</text>
    </div>
  </div>
</template>

<style>
  .wrapper { padding-top: 24; }
  .thread-heading { height: 80; font-size: 32; }
  .list { border-width: 4; border-color: #ccf; }
  .composer { flex-direction: row; margin-top: 20; padding: 20; border-width: 4; border-color: #ccf; }
  .composer-input { flex: 1; font-size: 28; }
  .composer-button { font-size: 28; background-color: #eee; border-radius: 10; padding: 20; }
</style>

<script>
import { init, mapGetters } from '../../../'

export {
  init
}

export function data () {
  return {
    inputValue: ''
  }
}

export const computed = {
  ...mapGetters({
    thread: 'currentThread',
    messages: 'currentMessages'
  }),
  sortedMessages () {
    return this.messages
      .slice()
      .sort((a, b) => a.timestamp - b.timestamp)
  }
}

export const watch = {
  'thread.lastMessage': function () {
    setTimeout(() => {
      const ul = this.$el('list')
      const lastLi = ul.children[ul.children.length - 1]
      require('@weex-module/dom').scrollToElement(lastLi, {})
    })
  }
}

export const methods = {
  update (e) {
    this.inputValue = e.value
  },
  sendMessage (e) {
    const text = this.inputValue
    if (text.trim()) {
      this.$store.dispatch('sendMessage', {
        text,
        thread: this.thread
      })
      this.inputValue = ''
    }
  }
}
</script>
